import {
   Dialog,
   DialogContent,
   DialogTrigger,
   DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { CreateClassGroupSchema } from "@/backend/modules/classgroup/schemas/classGroupSchemas";
import { z } from "zod";
import { ClassGroupService } from "@/backend/modules/classgroup/service/classGroupService";
import { useState, useEffect } from "react";
import {
   Select,
   SelectTrigger,
   SelectContent,
   SelectItem,
   SelectValue,
} from "@/components/ui/select";
import { modalityService } from "@/backend/modules/classgroup/service/modalityService";
import { ErrorToast, SuccessToast } from "../../toasts/Toasts";
import { ModalityResponseDTO } from "@/backend/modules/classgroup/types/modalityTypes";
import { AxiosError } from "axios";

type Props = {
   children: React.ReactNode;
   onCreated?: () => void;
};

export function ClassGroupDialog({ children, onCreated }: Props) {
   const form = useForm<z.infer<typeof CreateClassGroupSchema>>({
      resolver: zodResolver(CreateClassGroupSchema),
      defaultValues: {
         autoGeneratedSessions: false,
         isEvent: false,
         startDate: "",
         endDate: "",
      },
   });

   const [modalidades, setModalidades] = useState<ModalityResponseDTO[]>([]);
   const [isSubmitting, setIsSubmitting] = useState(false);

   useEffect(() => {
      modalityService.getAll().then(setModalidades);
   }, []);

   const onSubmit = async (data: z.infer<typeof CreateClassGroupSchema>) => {
      try {
         setIsSubmitting(true);

         // Formata as datas para o padrão YYYY-MM-DD que o backend espera
         const payload = {
            ...data,
            startDate: formatDateForBackend(data.startDate),
            endDate: formatDateForBackend(data.endDate),
         };

         await ClassGroupService.create(payload);
         form.reset();
         onCreated?.();
         SuccessToast("Sucesso!", "Turma criada com sucesso!");
      } catch (error: unknown) {
         if (error instanceof AxiosError) {
            ErrorToast(error.response?.data?.message);
         } else {
            ErrorToast("Erro ao criar turma. Tente novamente.");
         }
      } finally {
         setIsSubmitting(false);
      }
   };

   // Função auxiliar para formatar a data
   const formatDateForBackend = (dateString: string) => {
      if (!dateString) return "";
      const date = new Date(dateString);
      return date.toISOString().split("T")[0]; // Retorna apenas YYYY-MM-DD
   };

   return (
      <Dialog>
         <DialogTrigger asChild>{children}</DialogTrigger>
         <DialogContent>
            <DialogTitle>Criar Nova Turma</DialogTitle>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-3">
               <div>
                  <Label htmlFor="title">Título*</Label>
                  <Input
                     id="title"
                     {...form.register("title")}
                     placeholder="Nome da turma"
                  />
                  {form.formState.errors.title && (
                     <span className="text-red-500 text-xs">
                        {form.formState.errors.title.message}
                     </span>
                  )}
               </div>

               <div>
                  <Label htmlFor="description">Descrição</Label>
                  <Input
                     id="description"
                     {...form.register("description")}
                     placeholder="Descrição opcional"
                  />
               </div>

               <div>
                  <Label htmlFor="capacity">Capacidade*</Label>
                  <Input
                     type="number"
                     id="capacity"
                     {...form.register("capacity", { valueAsNumber: true })}
                     min="1"
                  />
                  {form.formState.errors.capacity && (
                     <span className="text-red-500 text-xs">
                        {form.formState.errors.capacity.message}
                     </span>
                  )}
               </div>

               <div>
                  <Label htmlFor="modalityId">Modalidade*</Label>
                  <Select
                     onValueChange={(value) =>
                        form.setValue("modalityId", value)
                     }
                     value={form.watch("modalityId")}
                  >
                     <SelectTrigger>
                        <SelectValue placeholder="Selecione uma modalidade" />
                     </SelectTrigger>
                     <SelectContent>
                        {modalidades.map((mod: any) => (
                           <SelectItem key={mod.id} value={mod.id}>
                              {mod.name}
                           </SelectItem>
                        ))}
                     </SelectContent>
                  </Select>
                  {form.formState.errors.modalityId && (
                     <span className="text-red-500 text-xs">
                        {form.formState.errors.modalityId.message}
                     </span>
                  )}
               </div>

               <div className="flex gap-2">
                  <div className="flex-1">
                     <Label htmlFor="startDate" className="text-foreground">
                        Data Início*
                     </Label>
                     <Input
                        type="date"
                        id="startDate"
                        {...form.register("startDate")}
                        className="[&::-webkit-calendar-picker-indicator]:invert-[1]"
                     />
                     {form.formState.errors.startDate && (
                        <span className="text-red-500 text-xs">
                           {form.formState.errors.startDate.message}
                        </span>
                     )}
                  </div>
                  <div className="flex-1">
                     <Label htmlFor="endDate" className="text-foreground">
                        Data Término*
                     </Label>
                     <Input
                        type="date"
                        id="endDate"
                        {...form.register("endDate")}
                        className="[&::-webkit-calendar-picker-indicator]:invert-[1]"
                        min={form.watch("startDate")} // Define data mínima como a data de início
                     />
                     {form.formState.errors.endDate && (
                        <span className="text-red-500 text-xs">
                           {form.formState.errors.endDate.message}
                        </span>
                     )}
                  </div>
               </div>

               <div className="flex items-center space-x-2">
                  <Checkbox
                     id="autoGeneratedSessions"
                     checked={form.watch("autoGeneratedSessions")}
                     onCheckedChange={(checked) =>
                        form.setValue("autoGeneratedSessions", !!checked)
                     }
                  />
                  <Label htmlFor="autoGeneratedSessions">
                     Gerar sessões automaticamente
                  </Label>
               </div>

               <div className="flex items-center space-x-2">
                  <Checkbox
                     id="isEvent"
                     checked={form.watch("isEvent")}
                     onCheckedChange={(checked) =>
                        form.setValue("isEvent", !!checked)
                     }
                  />
                  <Label htmlFor="isEvent">É um evento?</Label>
               </div>

               <Button
                  type="submit"
                  className="w-full mt-2"
                  disabled={isSubmitting}
               >
                  {isSubmitting ? "Criando..." : "Criar Turma"}
               </Button>
            </form>
         </DialogContent>
      </Dialog>
   );
}
