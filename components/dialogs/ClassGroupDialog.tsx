import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox"; // Adicione isso
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { CreateClassGroupSchema } from "@/backend/modules/classgroup/schemas/classGroupSchemas";
import { z } from "zod";
import { ClassGroupService } from "@/backend/modules/classgroup/service/classGroupService";
import { useState, useEffect } from "react";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "@/components/ui/select";
import { modalityService } from "@/backend/modules/classgroup/service/modalityService";
import { ErrorToast, SuccessToast } from "../toasts/Toasts";


type Props = {
  children: React.ReactNode;
  onCreated?: () => void;
};

export function ClassGroupDialog({ children, onCreated }: Props) {
  const form = useForm<z.infer<typeof CreateClassGroupSchema>>({
    resolver: zodResolver(CreateClassGroupSchema),
    defaultValues: {
      autoGeneratedSessions: false,
      isEvent: false,
      startDate: '', // Adicionado valor padrão
      endDate: '',   // Adicionado valor padrão
    },
  });

  const [modalidades, setModalidades] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false); // Estado de loading

  useEffect(() => {
    modalityService.getAll().then(setModalidades);
  }, []);

  const onSubmit = async (data: z.infer<typeof CreateClassGroupSchema>) => {
    try {
      setIsSubmitting(true);
      
      const payload = {
        ...data,
        startDate: new Date(data.startDate).toISOString(),
        endDate: new Date(data.endDate).toISOString(),
      };

      await ClassGroupService.create(payload);
      form.reset();
      onCreated?.();
    } catch (error) {
      console.error("Erro ao criar turma:", error);
      // Você pode adicionar um toast de erro aqui
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent>
        <DialogTitle>Criar Nova Turma</DialogTitle>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-3">
          <div>
            <Label htmlFor="title">Título</Label>
            <Input id="title" {...form.register("title")} />
          </div>

          <div>
            <Label htmlFor="description">Descrição</Label>
            <Input id="description" {...form.register("description")} />
          </div>

          <div>
            <Label htmlFor="capacity">Capacidade</Label>
            <Input
              type="number"
              id="capacity"
              {...form.register("capacity", { valueAsNumber: true })}
            />
          </div>

          <div>
            <Label htmlFor="modalityId">Modalidade</Label>
            <Select
              onValueChange={(value) => form.setValue("modalityId", value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Selecione uma modalidade" />
              </SelectTrigger>
              <SelectContent>
                {modalidades.map((mod: any) => (
                  <SelectItem key={mod.id} value={mod.id}>
                    {mod.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex gap-2">
            <div className="flex-1">
              <Label htmlFor="startDate" className="text-white">Início</Label>
              <Input 
                type="date" 
                id="startDate" 
                {...form.register("startDate")} 
                className="[&::-webkit-calendar-picker-indicator]:invert-[1]"
              />
            </div>
            <div className="flex-1">
              <Label htmlFor="endDate" className="text-white">Término</Label>
              <Input 
                type="date" 
                id="endDate" 
                {...form.register("endDate")} 
                className="[&::-webkit-calendar-picker-indicator]:invert-[1]"
              />
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="autoGeneratedSessions"
              checked={form.watch("autoGeneratedSessions")}
              onCheckedChange={(checked) =>
                form.setValue("autoGeneratedSessions", !!checked)
              }
            />
            <Label htmlFor="autoGeneratedSessions">Gerar sessões automaticamente</Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="isEvent"
              checked={form.watch("isEvent")}
              onCheckedChange={(checked) =>
                form.setValue("isEvent", !!checked)
              }
            />
            <Label htmlFor="isEvent">É um evento?</Label>
          </div>


          <Button 
            type="submit" 
            className="w-full mt-2"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Criando..." : "Criar Turma"}
          </Button>
          
          {/* Exibindo erros de validação */}
          {Object.keys(form.formState.errors).length > 0 && (
            <div className="text-red-500 text-sm">
              Por favor, preencha todos os campos obrigatórios corretamente.
            </div>
          )}
        </form>
      </DialogContent>
    </Dialog>
  );
}
